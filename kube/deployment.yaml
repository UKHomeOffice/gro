---
apiVersion: apps/v1
kind: Deployment
metadata:
  {{ if eq .KUBE_NAMESPACE .PROD_ENV }}
  name: {{ .APP_NAME }}
  {{ else if eq .KUBE_NAMESPACE .BRANCH_ENV }}
  annotations:
    downscaler/uptime: {{ .NON_PROD_AVAILABILITY }}
  name: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
  {{ else }}
  annotations:
    downscaler/uptime: {{ .NON_PROD_AVAILABILITY }}
  name: {{ .APP_NAME }}
  {{ end }}
spec:
  {{ if or (eq .KUBE_NAMESPACE .STG_ENV) (eq .KUBE_NAMESPACE .PROD_ENV) }}
  replicas: 2
  {{ else }}
  replicas: 1
  {{ end }}
  selector:
    matchLabels:
      {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
      name: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
      {{ else }}
      name: {{ .APP_NAME }}
      {{ end }}
  template:
    metadata:
      labels:
        {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
        name: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
        app: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
        service: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
        {{ else }}
        name: {{ .APP_NAME }}
        app: {{ .APP_NAME }}
        service: {{ .APP_NAME }}
        {{ end }}
    spec:
      containers:
        - name: {{ .APP_NAME }}
          image: {{ .IMAGE_URL }}/{{ .IMAGE_REPO }}:{{.DRONE_COMMIT_SHA}}
          imagePullPolicy: Always
          securityContext:
            runAsNonRoot: true
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
                name: {{ .APP_NAME }}-configmap-{{ .DRONE_SOURCE_BRANCH }}
                {{ else }}
                name: {{ .APP_NAME }}-configmap
                {{ end }}
          env:
            # because some internal services have self signed certs
            - name: NODE_TLS_REJECT_UNAUTHORIZED
              value: "0"
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_HOST
              {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
              value: redis-{{ .DRONE_SOURCE_BRANCH }}
              {{ else }}
              value: redis
              {{ end }}
            {{ if or (eq .KUBE_NAMESPACE .STG_ENV) (eq .KUBE_NAMESPACE .PROD_ENV) }}
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: gro-session
                  key: token
            {{ end }}
            - name: AWS_USER
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: user
            - name: AWS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: password
            - name: POSTCODE_AUTH
              valueFrom:
                secretKeyRef:
                  name: postcode-auth
                  key: token
          {{ if not (eq .KUBE_NAMESPACE .BRANCH_ENV) }}
          livenessProbe:
            httpGet:
              path: /healthz/ping
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz/readiness
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 5
          {{ end }}
          resources:
            requests:
              cpu: "20m"
              memory: "100Mi"
            limits:
              cpu: "100m"
              memory: "200Mi"
        - name: nginx-proxy
          image: quay.io/ukhomeofficedigital/nginx-proxy-govuk:v3
          resources:
            requests:
              memory: 10Mi
              cpu: 10m
            limits:
              cpu: 250m
              memory: 256Mi
          env:
            - name: PROXY_SERVICE_HOST
              value: 127.0.0.1
            - name: PROXY_SERVICE_PORT
              value: "8080"
            - name: ENABLE_UUID_PARAM
              value: "FALSE"
            - name: EXTRA_NAXSI_RULES
              value: |-
                BasicRule wl:1001,1002,1008,1009,1010,1011,1013,1015 "mz:BODY"; BasicRule wl:1002,1005,1007,1010,1011,1315 "mz:$HEADERS_VAR:Cookie";
            - name: PORT_IN_HOST_HEADER
              value: "FALSE"
            - name: ERROR_REDIRECT_CODES
              value: "599"
            - name: ADD_NGINX_SERVER_CFG
              value: |
                add_header Cache-Control private;
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header X-XSS-Protection "1; mode=block" always;
                location /public {
                  add_header Cache-Control max-age=86400;
                  add_header X-Frame-Options "SAMEORIGIN" always;
                  add_header X-Content-Type-Options "nosniff" always;
                  add_header X-XSS-Protection "1; mode=block" always;
                  alias /public;
                }

          ports:
            - containerPort: 10443
          volumeMounts:
            - mountPath: /public
              name: public
          securityContext:
            runAsNonRoot: true
      volumes:
        - name: public
          emptyDir: {}
