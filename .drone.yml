---
kind: pipeline
name: default
type: kubernetes

environment:
  APP_NAME: general-registrars-office
  PROD_ENV: gro-form
  STG_ENV: gro-form-preprod
  # UAT_ENV: gro-form-uat
  BRANCH_ENV: gro-form-dev
  PRODUCTION_URL: www.certificate-enquiries.homeoffice.gov.uk
  IMAGE_URL: quay.io/ukhomeofficedigital
  IMAGE_REPO: gro-form
  GIT_REPO: UKHomeOffice/gro
  NON_PROD_AVAILABILITY: Mon-Fri 08:00-19:00 Europe/London
  READY_FOR_TEST_DELAY: 20s

trigger:
  branch:
    - feature/*
    - master

linting: &linting
  pull: if-not-exists
  image: node:14
  environment:
    NOTIFY_KEY: USE_MOCK
  commands:
    - yarn run test:lint

unit_tests: &unit_tests
  pull: if-not-exists
  image: node:14
  environment:
    NOTIFY_KEY: USE_MOCK
  commands:
    - yarn run test:unit

sonar_scanner: &sonar_scanner
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/sonar-scanner-node:549b75f593f28da1c4a0a6f79877ec69d3b21037
  commands:
    - sonar-scanner -Dproject.settings=./sonar-project.properties

steps:
  - name: clone_repos
    image: alpine/git
    commands:
      - git clone https://github.com/UKHomeOfficeForms/hof-cve-exceptions
    when:
      branch: master
      event: pull_request

  - name: setup
    pull: if-not-exists
    image: node:14
    environment:
      NOTIFY_KEY: USE_MOCK
    commands:
      - yarn install --frozen-lockfile
      - yarn run postinstall
    when:
      branch:
        include:
        - master
        - feature/*
      event: [push, pull_request]

  - name: linting_deploy
    <<: *linting
    when:
      branch:
        include:
          - master
          - feature/*
      event: push

  - name: unit_tests_deploy
    <<: *unit_tests
    when:
      branch:
        include:
          - master
          - feature/*
      event: push

  - name: sonar_scanner_deploy
    <<: *sonar_scanner
    when:
      branch:
        include:
          - master
          - feature/*
      event: push

  - name: build_acceptance_deploy
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
      - docker build --no-cache -f Dockerfile-acceptance -t acceptance-$${DRONE_COMMIT_SHA} .
    when:
      branch:
        include:
          - master
          - feature/*
      event: push

  - name: test_acceptance_deploy
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
    - docker run -d --name=redis-$${DRONE_COMMIT_SHA} redis
    - docker run -d -e NODE_ENV=ci --name=$${IMAGE_REPO}:$${DRONE_COMMIT_SHA} --net=container:redis-$${DRONE_COMMIT_SHA} $${IMAGE_REPO}:$${DRONE_COMMIT_SHA}
    - docker run -e OPENSSL_CONF=/etc/ssl/ --rm --net=container:$${IMAGE_REPO}:$${DRONE_COMMIT_SHA} acceptance-$${DRONE_COMMIT_SHA}
    - docker rm -vf "$${IMAGE_REPO}:$${DRONE_COMMIT_SHA}" "redis-$${DRONE_COMMIT_SHA}"
    when:
      branch:
        include:
          - master
          - feature/*
      event: push

  - name: build_image
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
      - docker build --no-cache -t $${IMAGE_REPO}:$${DRONE_COMMIT_SHA} .
    volumes:
      - name: dockersock
        path: /var/run
    when:
      branch: master
      event: [push, pull_request]

  - name: image_to_quay
    pull: if-not-exists
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    environment:
      DOCKER_PASSWORD:
        from_secret: DOCKER_PASSWORD
    commands:
    - docker login -u="ukhomeofficedigital+drone" -p=$${DOCKER_PASSWORD} quay.io
    - docker tag $${IMAGE_REPO}:$${DRONE_COMMIT_SHA} $${IMAGE_URL}/$${IMAGE_REPO}:$${DRONE_COMMIT_SHA}
    - docker push $${IMAGE_URL}/$${IMAGE_REPO}:$${DRONE_COMMIT_SHA}
    when:
      branch: master
      event: [push, pull_request]

  # Deploy to pull request UAT environment
  - name: deploy_to_branch
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: kube_server_dev
      KUBE_TOKEN_GRO_ACP_NOTPROD:
        from_secret: kube_token_dev
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_GRO_ACP_NOTPROD}
      - export KUBE_NAMESPACE=$${BRANCH_ENV}
      - export DRONE_SOURCE_BRANCH=$(echo $${DRONE_SOURCE_BRANCH} | tr '[:upper:]' '[:lower:]')
      - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yml -f kube/redis-network-policy.yml -f kube/redis-deployment.yml
      - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
      - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
      - sleep $${READY_FOR_TEST_DELAY}
      - echo "UAT Branch - $${APP_NAME}-$${DRONE_SOURCE_BRANCH}.branch.internal.sas-notprod.homeoffice.gov.uk"
    when:
      branch: master
      event: pull_request

  - name: linting_branch
    <<: *linting
    when:
      branch:
        include:
          - master
          - feature/*
      event: pull_request

  - name: unit_tests_branch
    <<: *unit_tests
    when:
      branch:
        include:
          - master
          - feature/*
      event: pull_request

  - name: sonar_scanner_branch
    <<: *sonar_scanner
    when:
      branch:
        include:
          - master
          - feature/*
      event: pull_request

  - name: build_acceptance_branch
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
      - docker build --no-cache -f Dockerfile-acceptance -t acceptance-$${DRONE_COMMIT_SHA} .
    when:
      branch: master
      event: pull_request

  - name: test_acceptance_branch
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
    - docker run -d --name=redis-$${DRONE_COMMIT_SHA} redis
    - docker run -d -e NODE_ENV=ci --name=$${IMAGE_REPO}:$${DRONE_COMMIT_SHA} --net=container:redis-$${DRONE_COMMIT_SHA} $${IMAGE_REPO}:$${DRONE_COMMIT_SHA}
    - docker run -e OPENSSL_CONF=/etc/ssl/ --rm --net=container:$${IMAGE_REPO}:$${DRONE_COMMIT_SHA} acceptance-$${DRONE_COMMIT_SHA}
    - docker rm -vf "$${IMAGE_REPO}:$${DRONE_COMMIT_SHA}" "redis-$${DRONE_COMMIT_SHA}"
    when:
      branch: master
      event: pull_request

  # Snyk & Anchore security scans which run after branch deployment to prevent blocking of PR UAT tests
  - name: snyk_scan
    pull: if-not-exists
    image: node:14
    environment:
      SNYK_TOKEN:
        from_secret: snyk_token
    commands:
      - yarn run test:snyk
    when:
      branch:
        include:
          - master
          - feature/*
      event: pull_request

  - name: anchore_scan
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
    pull: always
    environment:
      IMAGE_NAME: gro-form:${DRONE_COMMIT_SHA}
      LOCAL_IMAGE: true
      TOLERATE: medium
      WHITELIST_FILE: hof-cve-exceptions/gro-form.txt
    when:
      branch: master
      event: pull_request

  # Deploy to Master UAT environment
  - name: deploy_to_uat
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: kube_server_dev
      KUBE_TOKEN_GRO_ACP_NOTPROD:
        from_secret: kube_token_dev
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_GRO_ACP_NOTPROD}
      - export KUBE_NAMESPACE=$${UAT_ENV}
      - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yml -f kube/redis-network-policy.yml -f kube/redis-deployment.yml
      - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
      - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
      - sleep $${READY_FOR_TEST_DELAY}
    when:
      branch: master
      event: push

  # Get pull request branch so correct PR UAT environment is torn down in the tear_down_branch step that follows
  - name: get_pr_branch
    pull: if-not-exists
    image: drone/cli:alpine@sha256:14409f7f7247befb9dd2effdb2f61ac40d1f5fbfb1a80566cf6f2f8d21f3be11
    environment:
      DRONE_SERVER:
        from_secret: drone_server
      DRONE_TOKEN:
        from_secret: drone_token
    volumes:
      - name: dockersock
        path: /root/.dockersock
    commands:
      - drone build info $GIT_REPO $DRONE_BUILD_NUMBER --format {{.Message}} | grep -o " '.*' " | tr -d "[ ']" | tr '[:upper:]' '[:lower:]' > /root/.dockersock/branch_name.txt
    when:
      branch: master
      event: push

  # Tear down pull request UAT environment
  - name: tear_down_branch
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: kube_server_dev
      KUBE_TOKEN_GRO_ACP_NOTPROD:
        from_secret: kube_token_dev
    volumes:
      - name: dockersock
        path: /root/.dockersock
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_GRO_ACP_NOTPROD}
      - export KUBE_NAMESPACE=$${BRANCH_ENV}
      - export DRONE_SOURCE_BRANCH=$(cat /root/.dockersock/branch_name.txt)
      - kubectl="kubectl --insecure-skip-tls-verify --server=$${KUBE_SERVER} --namespace=$${KUBE_NAMESPACE} --token=$${KUBE_TOKEN}"
      - kd --delete --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yml -f kube/redis-network-policy.yml -f kube/redis-deployment.yml
      - kd --delete --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
      - kd --delete --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
      - $${kubectl} delete secret $${APP_NAME}-internal-$${DRONE_SOURCE_BRANCH} --ignore-not-found=true
      - echo "Torn Down UAT Branch - $${APP_NAME}-$${DRONE_SOURCE_BRANCH}.branch.internal.sas-notprod.homeoffice.gov.uk"
    when:
      branch: master
      event: push

    # Deploy to Production environment
  - name: deploy_to_preprod
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: kube_server_dev
      KUBE_TOKEN_GRO_ACP_PROD:
        from_secret: kube_token_dev
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_GRO_ACP_PROD}
      - export KUBE_NAMESPACE=$${STG_ENV}
      - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yml -f kube/redis-network-policy.yml -f kube/redis-deployment.yml
      - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
      - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
      - sleep $${READY_FOR_TEST_DELAY}
    when:
      branch: master
      event: push

  # Checks a build being promoted has passed, is on master which effectively means a healthy build on Staging
  - name: sanity_check_build_prod
    pull: if-not-exists
    image: drone/cli:alpine@sha256:14409f7f7247befb9dd2effdb2f61ac40d1f5fbfb1a80566cf6f2f8d21f3be11
    environment:
      DRONE_SERVER:
        from_secret: drone_server
      DRONE_TOKEN:
        from_secret: drone_token
    commands:
      - export STATUS=$(drone build info $GIT_REPO $DRONE_BUILD_PARENT --format {{.Status}})
      - export BRANCH=$(drone build info $GIT_REPO $DRONE_BUILD_PARENT --format {{.Target}})
      - export EVENT=$(drone build info $GIT_REPO $DRONE_BUILD_PARENT --format {{.Event}})
      - export REFS=$(drone build info $GIT_REPO $DRONE_BUILD_PARENT --format {{.Ref}})
      - if [[ "$STATUS" != "success" || "$BRANCH" != "master" || "$EVENT" != "push" || "$REFS" != "refs/heads/master" ]] ; then return 1; else return 0 ; fi
    when:
      target: PROD

    # Deploy to Production environment
  - name: deploy_to_prod
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: kube_server_prod
      KUBE_TOKEN_GRO_ACP_PROD:
        from_secret: kube_token_prod
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_GRO_ACP_PROD}
      - export KUBE_NAMESPACE=$${PROD_ENV}
      - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yml -f kube/redis-network-policy.yml -f kube/redis-deployment.yml
      - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-external.yaml -f kube/networkpolicy-external.yaml -f kube/service.yaml
      - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
      - sleep $${READY_FOR_TEST_DELAY}
    when:
      target: PROD
      event: promote

# CRON job step that tears down our pull request UAT environments
  - name: cron_tear_down
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: kube_server_dev
      KUBE_TOKEN_GRO_ACP_PROD:
        from_secret: kube_token_dev
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_GRO_ACP_NOTPROD}
      - export KUBE_NAMESPACE=$${BRANCH_ENV}
      - ./clean_up.sh
    when:
      cron: tear_down_pr_envs
      event: cron

  # CRON job steps that runs security scans using Snyk & Anchore
  - name: cron_clone_repos
    image: alpine/git
    commands:
      - git clone https://github.com/UKHomeOfficeForms/hof-cve-exceptions
    when:
      cron: security_scans
      event: cron

  - name: cron_build_image
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
      - docker build --no-cache -t $${IMAGE_REPO}:$${DRONE_COMMIT_SHA} .
    volumes:
      - name: dockersock
        path: /var/run
    when:
      cron: security_scans
      event: cron

  - name: cron_snyk_scan
    pull: if-not-exists
    image: node:14
    environment:
      SNYK_TOKEN:
        from_secret: snyk_token
    commands:
      - yarn install --frozen-lockfile
      - yarn run postinstall
      - yarn run test:snyk
    when:
      cron: security_scans
      event: cron

  - name: cron_anchore_scan
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
    pull: always
    environment:
      IMAGE_NAME: gro-form:${DRONE_COMMIT_SHA}
      LOCAL_IMAGE: true
      TOLERATE: medium
      WHITELIST_FILE: hof-cve-exceptions/gro-form.txt
    when:
      cron: security_scans
      event: cron

  # Slack notification upon a CRON job fail
  - name: cron_notify_slack_tear_down_pr_envs
    pull: if-not-exists
    image: plugins/slack
    settings:
      channel: sas-build
      failure: ignore
      icon_url: http://readme.drone.io/0.5/logo_dark.svg
      icon.url: http://readme.drone.io/0.5/logo_dark.svg
      template: "CRON Job {{build.deployTo}} of GRO has {{build.status}} - <{{build.link}}|#{{build.number}}> {{#success build.status}}\n  :thumbsup: :thumbsup: :thumbsup:\n{{else}}\n  :x: :x: :x:\n{{/success}} Author: {{build.author}}\n\nDuration: {{since job.started}}\n\nJob: <{{build.link}}|#{{build.number}}>\n\nCommit: {{build.commit}}\n"
      username: Drone
      webhook:
        from_secret: slack_webhook
    when:
      cron: tear_down_pr_envs
      event: cron
      status: failure

  - name: cron_notify_slack_security_scans
    pull: if-not-exists
    image: plugins/slack
    settings:
      channel: sas-build
      failure: ignore
      icon_url: http://readme.drone.io/0.5/logo_dark.svg
      icon.url: http://readme.drone.io/0.5/logo_dark.svg
      template: "CRON Job {{build.deployTo}} of GRO has {{build.status}} - <{{build.link}}|#{{build.number}}> {{#success build.status}}\n  :thumbsup: :thumbsup: :thumbsup:\n{{else}}\n  :x: :x: :x:\n{{/success}} Author: {{build.author}}\n\nDuration: {{since job.started}}\n\nJob: <{{build.link}}|#{{build.number}}>\n\nCommit: {{build.commit}}\n"
      username: Drone
      webhook:
        from_secret: slack_webhook
    when:
      cron: security_scans
      event: cron
      status: failure

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

  # Anchore scanning needs background service to run
  - name: anchore-submission-server
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
    pull: always
    commands:
      - /run.sh server

  # Redis session setup in background so integration tests can run
  - name: session
    image: redis
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}

...
